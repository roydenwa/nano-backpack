<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="LegUp" id="1" localization="8" tooltip="" x="367" y="37">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import motion
import almath

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):

        motionProxy = ALProxy("ALMotion")
        postureProxy = ALProxy("ALRobotPosture")






        effector   = "LLeg"
        space      =  motion.FRAME_TORSO
        axisMask   = almath.AXIS_MASK_ALL           # full control
        isAbsolute = False

        # Since we are in relative, the current position is zero
        currentPos = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

        # Define the changes relative to the current position
        dx         =  0.00# translation axis X (meters)
        dy         =  0.00    # translation axis Y (meters)
        dz         =  0.095 # translation axis Z (meters)
        dwx        =  0.00      # rotation axis X (radians)
        dwy        =  0.00     # rotation axis Y (radians)
        dwz        =  0.00     # rotation axis Z (radians)
        targetPos  = [dx, dy, dz, dwx, dwy, dwz]

        # Go to the target and back again
        path       = [targetPos]
        times      = [4.0] # seconds



        motionProxy.positionInterpolation(effector, space, path, axisMask, times, isAbsolute) #motion Command

        self.onStopped() #activate the output of the box


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="WeightToLeft" id="2" localization="8" tooltip="" x="239" y="40">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import motion
import almath

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):

        motionProxy = ALProxy("ALMotion")
        postureProxy = ALProxy("ALRobotPosture")



        postureProxy.goToPosture("StandInit", 4)


        effector   = "Torso"
        space      =  motion.FRAME_ROBOT
        axisMask   = almath.AXIS_MASK_ALL           # full control
        isAbsolute = False

        # Since we are in relative, the current position is zero
        currentPos = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

        # Define the changes relative to the current position
        dx         =  0.00  # translation axis X (meters)
        dy         =  -0.065  # translation axis Y (meters)
        dz         =  0.00 # translation axis Z (meters)
        dwx        =  0.00      # rotation axis X (radians)
        dwy        =  0.00      # rotation axis Y (radians)
        dwz        =  0.00      # rotation axis Z (radians)
        targetPos  = [dx, dy, dz, dwx, dwy, dwz]

        # Go to the target and back again
        path       = [targetPos]
        times      = [2.5] # seconds



        motionProxy.positionInterpolation(effector, space, path, axisMask, times, isAbsolute) #motion Command

        self.onStopped() #activate the output of the box


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="Set Stiffness" id="5" localization="8" tooltip="Stiffen the motors selected in parameters." x="86" y="27">
              <bitmap>media/images/box/movement/stiffness.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False
        self.motion = self.session().service("ALMotion")

    def onUnload(self):
        self.bIsRunning = False

    def setStiffness(self, stiffness):
        self.bIsRunning = True
        duration = self.getParameter("Duration (s)")
        if(self.getParameter("Head")):
            self.motion.stiffnessInterpolation("Head", stiffness, duration, _async=True)
        if(self.getParameter("Left arm")):
            self.motion.stiffnessInterpolation("LArm", stiffness, duration, _async=True)
        if(self.getParameter("Right arm")):
            self.motion.stiffnessInterpolation("RArm", stiffness, duration, _async=True)
        if(self.getParameter("Left leg")):
            self.motion.stiffnessInterpolation("LLeg", stiffness, duration, _async=True)
        if(self.getParameter("Right leg")):
            self.motion.stiffnessInterpolation("RLeg", stiffness, duration, _async=True)
        time.sleep(duration)
        self.bIsRunning = False

    def onInput_onSet(self):
        if( self.bIsRunning ):
            return
        self.setStiffness(self.getParameter("Motors stiffness (%)")/100.)
        self.onReady() #~ activate output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="When this input is stimulated, the stiffness of the selected motors is set to&#x0A;the stiffness parameter value." id="2" />
              <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when stiffness has been set." id="3" />
              <Parameter name="Head" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the head stiffness?" id="4" />
              <Parameter name="Left arm" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the left arm stiffness?" id="5" />
              <Parameter name="Right arm" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the right arm stiffness?" id="6" />
              <Parameter name="Left leg" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the left leg stiffness?" id="7" />
              <Parameter name="Right leg" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the right leg stiffness?" id="8" />
              <Parameter name="Motors stiffness (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Stiffness value the motors are set to." id="9" />
              <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0.02" max="10" tooltip="How much time to go to the max/min stiffness in seconds." id="10" />
            </Box>
            <Box name="LegForward" id="6" localization="8" tooltip="" x="494" y="33">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import motion
import almath

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):

        motionProxy = ALProxy("ALMotion")
        postureProxy = ALProxy("ALRobotPosture")






        effector   = "LLeg"
        space      =  motion.FRAME_TORSO
        axisMask   = almath.AXIS_MASK_ALL           # full control
        isAbsolute = False

        # Since we are in relative, the current position is zero
        currentPos = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

        # Define the changes relative to the current position
        dx         =  0.09# translation axis X (meters)
        dy         =  0.00    # translation axis Y (meters)
        dz         =  0.00 # translation axis Z (meters)
        dwx        =  0.00      # rotation axis X (radians)
        dwy        =  0.00     # rotation axis Y (radians)
        dwz        =  0.00     # rotation axis Z (radians)
        targetPos  = [dx, dy, dz, dwx, dwy, dwz]

        # Go to the target and back again
        path       = [targetPos]
        times      = [4.0] # seconds



        motionProxy.positionInterpolation(effector, space, path, axisMask, times, isAbsolute) #motion Command

        self.onStopped() #activate the output of the box


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="readOutFootSensor" id="3" localization="8" tooltip="" x="714" y="64">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):

        motionProxy = ALProxy("ALMotion")
        postureProxy = ALProxy("ALRobotPosture")
        memoryProxy = ALProxy("ALMemory")
        loggerProxy = ALProxy("ALLogger")

        #presets of motion command
        effector   = "LLeg"
        space      =  motion.FRAME_TORSO
        axisMask   = almath.AXIS_MASK_ALL           # full control
        isAbsolute = False

        #reorientate foot
        loggerProxy.info("readOutFootSensor", "START REORIENTATION" )
        # Since we are in relative, the current position is zero
        currentPos = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

        # Define the changes relative to the current position
        dx         =  0.00# translation axis X (meters)
        dy         =  0.00    # translation axis Y (meters)
        dz         =  0.00 # translation axis Z (meters)
        dwx        =  -0.25      # rotation axis X (radians)
        dwy        =  0.05     # rotation axis Y (radians)
        dwz        =  0.00     # rotation axis Z (radians)
        targetPos  = [dx, dy, dz, dwx, dwy, dwz]

        # Go to the target and back again
        path       = [targetPos]
        times      = [1.0] # seconds

        motionProxy.positionInterpolation(effector, space, path, axisMask, times, isAbsolute) #motion Command
        loggerProxy.info("readOutFootSensor", "FOOT REORIENTED" )



        #move down loop
        j = 0
        i = True
        while i:

            #motion of left foot down
            loggerProxy.info("readOutFootSensor", "START MOVING DOWN ")
            # Since we are in relative, the current position is zero
            currentPos = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

            # Define the changes relative to the current position
            dx         =  0.00# translation axis X (meters)
            dy         =  0.00    # translation axis Y (meters)
            dz         =  -0.003 # translation axis Z (meters)
            dwx        =  0.00      # rotation axis X (radians)
            dwy        =  0.00     # rotation axis Y (radians)
            dwz        =  0.00     # rotation axis Z (radians)
            targetPos  = [dx, dy, dz, dwx, dwy, dwz]

            # Go to the target and back again
            path       = [targetPos]
            times      = [0.5] # seconds

            motionProxy.positionInterpolation(effector, space, path, axisMask, times, isAbsolute) #motion Command
            loggerProxy.info("readOutFootSensor", "MOVED 1 STEP ")


            #readout sensors
            LFsrFL = memoryProxy.getData("Device/SubDeviceList/LFoot/FSR/FrontLeft/Sensor/Value")
            LFsrFR = memoryProxy.getData("Device/SubDeviceList/LFoot/FSR/FrontRight/Sensor/Value")
            LFsrBL = memoryProxy.getData("Device/SubDeviceList/LFoot/FSR/RearLeft/Sensor/Value")
            LFsrBR = memoryProxy.getData("Device/SubDeviceList/LFoot/FSR/RearRight/Sensor/Value")

            loggerProxy.info("readOutFootSensor", "Left FSR [Kg] : %.2f %.2f %.2f %.2f" %  (LFsrFL, LFsrFR, LFsrBL, LFsrBR) )

            #test on contact
            if (LFsrFL+LFsrFR+LFsrBL+LFsrBR)>0.05:
                i = False
                loggerProxy.info("readOutFootSensor","CONTACT")
                self.onStopped()
            elif j >= 14:
                i = False
                loggerProxy.info("readOutFootSensor","DIE STUFE IST ZU KLEIN")
            #time.sleep(0.1)
            j = j+1
         #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
            <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="4" />
            <Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="4" />
            <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" />
            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
