<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram scale="84.0896">
            <Box name="LegUp" id="1" localization="8" tooltip="" x="690" y="34">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import motion
import almath

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):

        motionProxy = ALProxy("ALMotion")
        postureProxy = ALProxy("ALRobotPosture")






        effector   = "LLeg"
        space      =  motion.FRAME_TORSO
        axisMask   = almath.AXIS_MASK_ALL           # full control
        isAbsolute = False

        # Since we are in relative, the current position is zero
        currentPos = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

        # Define the changes relative to the current position
        dx         =  0.00# translation axis X (meters)
        dy         =  0.00    # translation axis Y (meters)
        dz         =  0.095 # translation axis Z (meters)
        dwx        =  0.00      # rotation axis X (radians)
        dwy        =  0.00     # rotation axis Y (radians)
        dwz        =  0.00     # rotation axis Z (radians)
        targetPos  = [dx, dy, dz, dwx, dwy, dwz]

        # Go to the target and back again
        path       = [targetPos]
        times      = [3.0] # seconds



        motionProxy.positionInterpolation(effector, space, path, axisMask, times, isAbsolute) #motion Command

        self.onStopped() #activate the output of the box


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="WeightToRigthFoot" id="2" localization="8" tooltip="" x="562" y="37">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import motion
import almath

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):

        motionProxy = ALProxy("ALMotion")
        postureProxy = ALProxy("ALRobotPosture")



        postureProxy.goToPosture("StandInit", 4)


        effector   = "Torso"
        space      =  motion.FRAME_ROBOT
        axisMask   = almath.AXIS_MASK_ALL           # full control
        isAbsolute = False

        # Since we are in relative, the current position is zero
        currentPos = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

        # Define the changes relative to the current position
        dx         =  0.00  # translation axis X (meters)
        dy         =  -0.065  # translation axis Y (meters)
        dz         =  0.00 # translation axis Z (meters)
        dwx        =  0.00      # rotation axis X (radians)
        dwy        =  0.00      # rotation axis Y (radians)
        dwz        =  0.00      # rotation axis Z (radians)
        targetPos  = [dx, dy, dz, dwx, dwy, dwz]

        # Go to the target and back again
        path       = [targetPos]
        times      = [1.5] # seconds



        motionProxy.positionInterpolation(effector, space, path, axisMask, times, isAbsolute) #motion Command

        self.onStopped() #activate the output of the box


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="Set Stiffness" id="5" localization="8" tooltip="Stiffen the motors selected in parameters." x="409" y="24">
              <bitmap>media/images/box/movement/stiffness.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False
        self.motion = self.session().service("ALMotion")

    def onUnload(self):
        self.bIsRunning = False

    def setStiffness(self, stiffness):
        self.bIsRunning = True
        duration = self.getParameter("Duration (s)")
        if(self.getParameter("Head")):
            self.motion.stiffnessInterpolation("Head", stiffness, duration, _async=True)
        if(self.getParameter("Left arm")):
            self.motion.stiffnessInterpolation("LArm", stiffness, duration, _async=True)
        if(self.getParameter("Right arm")):
            self.motion.stiffnessInterpolation("RArm", stiffness, duration, _async=True)
        if(self.getParameter("Left leg")):
            self.motion.stiffnessInterpolation("LLeg", stiffness, duration, _async=True)
        if(self.getParameter("Right leg")):
            self.motion.stiffnessInterpolation("RLeg", stiffness, duration, _async=True)
        time.sleep(duration)
        self.bIsRunning = False

    def onInput_onSet(self):
        if( self.bIsRunning ):
            return
        self.setStiffness(self.getParameter("Motors stiffness (%)")/100.)
        self.onReady() #~ activate output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="When this input is stimulated, the stiffness of the selected motors is set to&#x0A;the stiffness parameter value." id="2" />
              <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when stiffness has been set." id="3" />
              <Parameter name="Head" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the head stiffness?" id="4" />
              <Parameter name="Left arm" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the left arm stiffness?" id="5" />
              <Parameter name="Right arm" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the right arm stiffness?" id="6" />
              <Parameter name="Left leg" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the left leg stiffness?" id="7" />
              <Parameter name="Right leg" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the right leg stiffness?" id="8" />
              <Parameter name="Motors stiffness (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Stiffness value the motors are set to." id="9" />
              <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0.02" max="10" tooltip="How much time to go to the max/min stiffness in seconds." id="10" />
            </Box>
            <Box name="LegForward" id="6" localization="8" tooltip="" x="817" y="30">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import motion
import almath

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):

        motionProxy = ALProxy("ALMotion")
        postureProxy = ALProxy("ALRobotPosture")






        effector   = "LLeg"
        space      =  motion.FRAME_TORSO
        axisMask   = almath.AXIS_MASK_ALL           # full control
        isAbsolute = False

        # Since we are in relative, the current position is zero
        currentPos = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

        # Define the changes relative to the current position
        dx         =  0.085# translation axis X (meters)
        dy         =  0.00    # translation axis Y (meters)
        dz         =  0.00 # translation axis Z (meters)
        dwx        =  0.00      # rotation axis X (radians)
        dwy        =  0.00     # rotation axis Y (radians)
        dwz        =  0.00     # rotation axis Z (radians)
        targetPos  = [dx, dy, dz, dwx, dwy, dwz]

        # Go to the target and back again
        path       = [targetPos]
        times      = [2.5] # seconds



        motionProxy.positionInterpolation(effector, space, path, axisMask, times, isAbsolute) #motion Command

        self.onStopped() #activate the output of the box


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="PlaceLeftFootDown" id="3" localization="8" tooltip="" x="964" y="22">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):

        motionProxy = ALProxy("ALMotion")
        postureProxy = ALProxy("ALRobotPosture")
        memoryProxy = ALProxy("ALMemory")
        loggerProxy = ALProxy("ALLogger")

        #presets of motion command
        effector   = "LLeg"
        space      =  motion.FRAME_TORSO
        axisMask   = almath.AXIS_MASK_ALL           # full control
        isAbsolute = False

        #reorientate foot
        loggerProxy.info("readOutFootSensor", "START REORIENTATION" )
        # Since we are in relative, the current position is zero
        currentPos = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

        # Define the changes relative to the current position
        dx         =  0.00# translation axis X (meters)
        dy         =  -0.02    # translation axis Y (meters)
        dz         =  0.00 # translation axis Z (meters)
        dwx        =  -0.25      # rotation axis X (radians)
        dwy        =  0.025     # rotation axis Y (radians)
        dwz        =  0.00     # rotation axis Z (radians)
        targetPos  = [dx, dy, dz, dwx, dwy, dwz]

        # Go to the target and back again
        path       = [targetPos]
        times      = [0.5] # seconds

        motionProxy.positionInterpolation(effector, space, path, axisMask, times, isAbsolute) #motion Command
        loggerProxy.info("readOutFootSensor", "FOOT REORIENTED" )



        #move down loop
        j = 0
        i = True

        #readout sensors
        LFsrFL = memoryProxy.getData("Device/SubDeviceList/LFoot/FSR/FrontLeft/Sensor/Value")
        LFsrFR = memoryProxy.getData("Device/SubDeviceList/LFoot/FSR/FrontRight/Sensor/Value")
        LFsrBL = memoryProxy.getData("Device/SubDeviceList/LFoot/FSR/RearLeft/Sensor/Value")
        LFsrBR = memoryProxy.getData("Device/SubDeviceList/LFoot/FSR/RearRight/Sensor/Value")

        loggerProxy.info("readOutFootSensor", "Left FSR [Kg] : %.2f %.2f %.2f %.2f" %  (LFsrFL, LFsrFR, LFsrBL, LFsrBR) )

        #test on contact
        if (LFsrFL+LFsrFR+LFsrBL+LFsrBR) > 0.05:
            i = False
            loggerProxy.info("readOutFootSensor","CONTACT")
            self.onStopped()

        while i:

            #motion of left foot down
            loggerProxy.info("readOutFootSensor", "START MOVING DOWN ")
            # Since we are in relative, the current position is zero
            currentPos = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

            # Define the changes relative to the current position
            dx         =  0.00# translation axis X (meters)
            dy         =  0.00    # translation axis Y (meters)
            dz         =  -0.002 # translation axis Z (meters)
            dwx        =  0.00      # rotation axis X (radians)
            dwy        =  0.00     # rotation axis Y (radians)
            dwz        =  0.00     # rotation axis Z (radians)
            targetPos  = [dx, dy, dz, dwx, dwy, dwz]

            # Go to the target and back again
            path       = [targetPos]
            times      = [0.3] # seconds

            motionProxy.positionInterpolation(effector, space, path, axisMask, times, isAbsolute) #motion Command
            loggerProxy.info("readOutFootSensor", "MOVED 1 STEP ")


            #readout sensors
            LFsrFL = memoryProxy.getData("Device/SubDeviceList/LFoot/FSR/FrontLeft/Sensor/Value")
            LFsrFR = memoryProxy.getData("Device/SubDeviceList/LFoot/FSR/FrontRight/Sensor/Value")
            LFsrBL = memoryProxy.getData("Device/SubDeviceList/LFoot/FSR/RearLeft/Sensor/Value")
            LFsrBR = memoryProxy.getData("Device/SubDeviceList/LFoot/FSR/RearRight/Sensor/Value")

        #    loggerProxy.info("readOutFootSensor", "Left FSR [Kg] : %.2f %.2f %.2f %.2f" %  (LFsrFL, LFsrFR, LFsrBL, LFsrBR) )

            #test on contact
            if (LFsrFL+LFsrFR+LFsrBL+LFsrBR) > 0.05:
                i = False
                loggerProxy.info("readOutFootSensor","CONTACT")
                self.onStopped()
            elif j >= 30:
                i = False
                loggerProxy.info("readOutFootSensor","DIE STUFE IST ZU KLEIN")
            #time.sleep(0.1)
            j = j+1
         #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped

        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="WieghtToLeft" id="4" localization="8" tooltip="" x="443" y="240">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):

        motionProxy = ALProxy("ALMotion")

        #disable FallManager
        motionProxy.setMotionConfig( [["ENABLE_DISACTIVATION_OF_FALL_MANAGER", True]] )
        motionProxy.setFallManagerEnabled(False)
        loggerProxy = ALProxy("ALLogger")






        effector   = "Torso"
        space      =  motion.FRAME_ROBOT
        axisMask   = almath.AXIS_MASK_ALL           # full control
        isAbsolute = False

#1th move
        i = 0
        while(i<11):
            loggerProxy.info("readOutFootSensor", "WEIGHT TO LEFT - MOVE 1" )

            # Since we are in relative, the current position is zero
            currentPos = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

            # Define the changes relative to the current position
            dx         =  0.009  # translation axis X (meters)
            dy         =  0.0051  # translation axis Y (meters)
            dz         =  -0.002 # translation axis Z (meters)
            dwx        =  0.00      # rotation axis X (radians)
            dwy        =  0.027      # rotation axis Y (radians)
            dwz        =  0.00      # rotation axis Z (radians)
            targetPos  = [dx, dy, dz, dwx, dwy, dwz]

            # Go to the target and back again
            path       = [targetPos]
            times      = [1.1] # seconds

            motionProxy.positionInterpolation(effector, space, path, axisMask, times, isAbsolute) #motion Command

            i = i+1

#2nd move
        i = 0
        while(i<5):
            loggerProxy.info("readOutFootSensor", "WEIGHT TO LEFT - MOVE 2" )

            # Since we are in relative, the current position is zero
            currentPos = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

            # Define the changes relative to the current position
            dx         =  0.000  # translation axis X (meters)
            dy         =  0.004  # translation axis Y (meters)
            dz         =  -0.001 # translation axis Z (meters)
            dwx        =  -0.02      # rotation axis X (radians)
            dwy        =  0.00      # rotation axis Y (radians)
            dwz        =  0.00      # rotation axis Z (radians)
            targetPos  = [dx, dy, dz, dwx, dwy, dwz]

            # Go to the target and back again
            path       = [targetPos]
            times      = [1.1] # seconds

            motionProxy.positionInterpolation(effector, space, path, axisMask, times, isAbsolute) #motion Command

            i = i+1
        loggerProxy.info("readOutFootSensor", "WEIGHT TO LEFT - END" )
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="LegUp (1)" id="7" localization="8" tooltip="" x="415" y="525">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import motion
import almath

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):

        motionProxy = ALProxy("ALMotion")
        postureProxy = ALProxy("ALRobotPosture")
        loggerProxy = ALProxy("ALLogger")

        loggerProxy.info("readOutFootSensor", "RIGTH FOOT UP" )




        effector   = "RLeg"
        space      =  motion.FRAME_TORSO
        axisMask   = almath.AXIS_MASK_ALL           # full control
        isAbsolute = False

        # Since we are in relative, the current position is zero
        currentPos = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

        # Define the changes relative to the current position
        dx         =  0.00# translation axis X (meters)
        dy         =  0.00    # translation axis Y (meters)
        dz         =  0.085 # translation axis Z (meters)
        dwx        =  0.00      # rotation axis X (radians)
        dwy        =  0.00     # rotation axis Y (radians)
        dwz        =  0.00     # rotation axis Z (radians)
        targetPos  = [dx, dy, dz, dwx, dwy, dwz]

        # Go to the target and back again
        path       = [targetPos]
        times      = [3.0] # seconds



        motionProxy.positionInterpolation(effector, space, path, axisMask, times, isAbsolute) #motion Command

        self.onStopped() #activate the output of the box


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="ArmsToLeft" id="8" localization="8" tooltip="" x="572" y="218">
              <bitmap>media/images/box/box-timeLine.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="22">
                <ActuatorList model="nao">
                  <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                    <Key frame="22" value="-51.0627" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                    <Key frame="22" value="-85.2574" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                    <Key frame="22" value="0.2416" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                    <Key frame="22" value="75.4087" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                    <Key frame="22" value="65.7406" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                    <Key frame="22" value="48.2502" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                    <Key frame="22" value="74.0072" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                    <Key frame="22" value="34.3633" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                    <Key frame="22" value="0.2412" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                    <Key frame="22" value="43.6846" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                    <Key frame="22" value="7.90786" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                    <Key frame="22" value="-59.9446" />
                  </ActuatorCurve>
                </ActuatorList>
              </Timeline>
            </Box>
            <Box name="leftHipRoll" id="9" localization="8" tooltip="" x="707" y="218">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):

        motionProxy = ALProxy("ALMotion")

        names            = "LHipRoll"
        angles           = 15.0*almath.TO_RAD
        fractionMaxSpeed = 0.05
        motionProxy.setAngles(names,angles,fractionMaxSpeed)



        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="LegForward (1)" id="10" localization="8" tooltip="" x="669" y="505">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import motion
import almath

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):

        motionProxy = ALProxy("ALMotion")
        postureProxy = ALProxy("ALRobotPosture")






        effector   = "RLeg"
        space      =  motion.FRAME_TORSO
        axisMask   = almath.AXIS_MASK_ALL           # full control
        isAbsolute = False

        # Since we are in relative, the current position is zero
        currentPos = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

        # Define the changes relative to the current position
        dx         =  0.085# translation axis X (meters)
        dy         =  0.00    # translation axis Y (meters)
        dz         =  0.01 # translation axis Z (meters)
        dwx        =  0.00      # rotation axis X (radians)
        dwy        =  0.00     # rotation axis Y (radians)
        dwz        =  0.00     # rotation axis Z (radians)
        targetPos  = [dx, dy, dz, dwx, dwy, dwz]

        # Go to the target and back again
        path       = [targetPos]
        times      = [3.0] # seconds



        motionProxy.positionInterpolation(effector, space, path, axisMask, times, isAbsolute) #motion Command

        self.onStopped() #activate the output of the box


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="PlaceLeftFootDown (1)" id="11" localization="8" tooltip="" x="811" y="501">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):

        motionProxy = ALProxy("ALMotion")
        postureProxy = ALProxy("ALRobotPosture")
        memoryProxy = ALProxy("ALMemory")
        loggerProxy = ALProxy("ALLogger")
        postureProxy = ALProxy("ALRobotPosture")

        #presets of motion command
        effector   = "RLeg"
        space      =  motion.FRAME_TORSO
        axisMask   = almath.AXIS_MASK_ALL           # full control
        isAbsolute = False

        #reorientate foot
        loggerProxy.info("readOutFootSensor", "START REORIENTATION" )
        # Since we are in relative, the current position is zero
        currentPos = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

        # Define the changes relative to the current position
        dx         =  0.00# translation axis X (meters)
        dy         =  0.00    # translation axis Y (meters)
        dz         =  0.00 # translation axis Z (meters)
        dwx        =  0.3      # rotation axis X (radians)
        dwy        =  -0.30     # rotation axis Y (radians)
        dwz        =  0.00     # rotation axis Z (radians)
        targetPos  = [dx, dy, dz, dwx, dwy, dwz]

        # Go to the target and back again
        path       = [targetPos]
        times      = [1] # seconds

        motionProxy.positionInterpolation(effector, space, path, axisMask, times, isAbsolute) #motion Command
        loggerProxy.info("readOutFootSensor", "FOOT REORIENTED" )



        #move down loop
        j = 0
        i = True

        #readout sensors
        RFsrFL = memoryProxy.getData("Device/SubDeviceList/RFoot/FSR/FrontLeft/Sensor/Value")
        RFsrFR = memoryProxy.getData("Device/SubDeviceList/RFoot/FSR/FrontRight/Sensor/Value")
        RFsrBL = memoryProxy.getData("Device/SubDeviceList/RFoot/FSR/RearLeft/Sensor/Value")
        RFsrBR = memoryProxy.getData("Device/SubDeviceList/RFoot/FSR/RearRight/Sensor/Value")

        loggerProxy.info("readOutFootSensor", "Right FSR [Kg] : %.2f %.2f %.2f %.2f" %  (RFsrFL, RFsrFR, RFsrBL, RFsrBR) )

        #test on contact
        if (RFsrFL+RFsrFR+RFsrBL+RFsrBR) > 0.05:
            i = False
            loggerProxy.info("readOutFootSensor","CONTACT")
            self.onStopped()

        while i:

            #motion of left foot down
            loggerProxy.info("readOutFootSensor", "START MOVING DOWN ")
            # Since we are in relative, the current position is zero
            currentPos = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

            # Define the changes relative to the current position
            dx         =  0.004# translation axis X (meters)
            dy         =  0.0003    # translation axis Y (meters)
            dz         =  -0.002 # translation axis Z (meters)
            dwx        =  0.00      # rotation axis X (radians)
            dwy        =  -0.005     # rotation axis Y (radians)
            dwz        =  0.00     # rotation axis Z (radians)
            targetPos  = [dx, dy, dz, dwx, dwy, dwz]

            # Go to the target and back again
            path       = [targetPos]
            times      = [0.3] # seconds

            motionProxy.positionInterpolation(effector, space, path, axisMask, times, isAbsolute) #motion Command
            loggerProxy.info("readOutFootSensor", "MOVED 1 STEP ")


            #readout sensors
            RFsrFL = memoryProxy.getData("Device/SubDeviceList/RFoot/FSR/FrontLeft/Sensor/Value")
            RFsrFR = memoryProxy.getData("Device/SubDeviceList/RFoot/FSR/FrontRight/Sensor/Value")
            RFsrBL = memoryProxy.getData("Device/SubDeviceList/RFoot/FSR/RearLeft/Sensor/Value")
            RFsrBR = memoryProxy.getData("Device/SubDeviceList/RFoot/FSR/RearRight/Sensor/Value")

        #    loggerProxy.info("readOutFootSensor", "Left FSR [Kg] : %.2f %.2f %.2f %.2f" %  (LFsrFL, LFsrFR, LFsrBL, LFsrBR) )

            #test on contact
            if (RFsrFL+RFsrFR+RFsrBL+RFsrBR) > 0.03:
                i = False
                loggerProxy.info("readOutFootSensor","CONTACT")

                self.onStopped()

            #time.sleep(0.1)
            j = j+1
         #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped

        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="Arms" id="12" localization="8" tooltip="" x="549" y="514">
              <bitmap>media/images/box/box-timeLine.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="40">
                <ActuatorList model="nao">
                  <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                    <Key frame="40" value="-41.3067" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                    <Key frame="40" value="-19.4265" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                    <Key frame="40" value="0.288" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                    <Key frame="40" value="53.26" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                    <Key frame="40" value="64.6859" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                    <Key frame="40" value="17.488" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                    <Key frame="40" value="44.2998" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                    <Key frame="40" value="54.051" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                    <Key frame="40" value="0.2932" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                    <Key frame="40" value="67.5033" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                    <Key frame="40" value="-50.0128" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                    <Key frame="40" value="-10.7252" />
                  </ActuatorCurve>
                </ActuatorList>
              </Timeline>
            </Box>
            <Box name="Stand Up" id="13" localization="8" tooltip="" x="1103" y="456">
              <bitmap>media/images/box/box-timeLine.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="177">
                <ActuatorList model="nao">
                  <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                    <Key frame="64" value="2.0191" />
                    <Key frame="112" value="1.14019" />
                    <Key frame="177" value="1.14019" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                    <Key frame="64" value="0.788627" />
                    <Key frame="112" value="0.524941" />
                    <Key frame="177" value="0.524941" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                    <Key frame="64" value="-40.5205" />
                    <Key frame="112" value="-23.2937" />
                    <Key frame="177" value="-19.8659" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                    <Key frame="64" value="1.145" />
                    <Key frame="112" value="0.00240423" />
                    <Key frame="177" value="0.00240423" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                    <Key frame="64" value="-52.8205" />
                    <Key frame="112" value="-53.5237" />
                    <Key frame="177" value="-56.512" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                    <Key frame="64" value="-77.5229" />
                    <Key frame="112" value="-78.6655" />
                    <Key frame="177" value="-78.4897" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                    <Key frame="64" value="0.274" />
                    <Key frame="112" value="0.258" />
                    <Key frame="177" value="0.258" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                    <Key frame="64" value="-28.4745" />
                    <Key frame="112" value="-31.7265" />
                    <Key frame="177" value="-26.0135" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                    <Key frame="64" value="0.178186" />
                    <Key frame="112" value="-0.0854867" />
                    <Key frame="177" value="-0.0854867" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                    <Key frame="64" value="2.81494" />
                    <Key frame="112" value="0.00240423" />
                    <Key frame="177" value="0.00240423" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                    <Key frame="64" value="65.3011" />
                    <Key frame="112" value="37.3516" />
                    <Key frame="177" value="40.6915" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                    <Key frame="64" value="81.4732" />
                    <Key frame="112" value="80.2427" />
                    <Key frame="177" value="80.9459" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                    <Key frame="64" value="56.4241" />
                    <Key frame="112" value="59.5003" />
                    <Key frame="177" value="16.0818" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                    <Key frame="64" value="16.6091" />
                    <Key frame="112" value="18.1033" />
                    <Key frame="177" value="1.0523" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                    <Key frame="64" value="-38.4942" />
                    <Key frame="112" value="-22.7616" />
                    <Key frame="177" value="-20.4764" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                    <Key frame="64" value="-0.261268" />
                    <Key frame="112" value="-0.0854867" />
                    <Key frame="177" value="-0.0854867" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                    <Key frame="64" value="66.5365" />
                    <Key frame="112" value="67.4154" />
                    <Key frame="177" value="56.6926" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                    <Key frame="64" value="75.8482" />
                    <Key frame="112" value="76.4634" />
                    <Key frame="177" value="78.6607" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                    <Key frame="64" value="0.2752" />
                    <Key frame="112" value="0.2648" />
                    <Key frame="177" value="0.2648" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                    <Key frame="64" value="-28.4793" />
                    <Key frame="112" value="-31.8192" />
                    <Key frame="177" value="-26.1063" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                    <Key frame="64" value="0.705531" />
                    <Key frame="112" value="0.0902951" />
                    <Key frame="177" value="0.0902951" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                    <Key frame="64" value="2.81494" />
                    <Key frame="112" value="0.00240423" />
                    <Key frame="177" value="0.00240423" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                    <Key frame="64" value="61.7903" />
                    <Key frame="112" value="35.3349" />
                    <Key frame="177" value="40.1689" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                    <Key frame="64" value="77.435" />
                    <Key frame="112" value="74.8862" />
                    <Key frame="177" value="81.0386" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                    <Key frame="64" value="-58.1867" />
                    <Key frame="112" value="-61.0872" />
                    <Key frame="177" value="-16.5261" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                    <Key frame="64" value="2.81013" />
                    <Key frame="112" value="3.86484" />
                    <Key frame="177" value="-0.705531" />
                  </ActuatorCurve>
                </ActuatorList>
              </Timeline>
            </Box>
            <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
            <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="4" />
            <Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="4" />
            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
            <Link inputowner="8" indexofinput="2" outputowner="4" indexofoutput="4" />
            <Link inputowner="9" indexofinput="2" outputowner="8" indexofoutput="4" />
            <Link inputowner="7" indexofinput="2" outputowner="9" indexofoutput="4" />
            <Link inputowner="11" indexofinput="2" outputowner="10" indexofoutput="4" />
            <Link inputowner="12" indexofinput="2" outputowner="7" indexofoutput="4" />
            <Link inputowner="10" indexofinput="2" outputowner="12" indexofoutput="4" />
            <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="4" />
            <Link inputowner="0" indexofinput="4" outputowner="13" indexofoutput="4" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
